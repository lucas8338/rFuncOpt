% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{rFuncOpt}
\alias{rFuncOpt}
\title{rFuncOpt}
\usage{
rFuncOpt(
  defaultFunction,
  params,
  thread.num = parallel::detectCores(),
  thread.type = ifelse(Sys.info()[["sysname"]] == "Windows", "PSOCK", "SOCK")
)
}
\arguments{
\item{defaultFunction}{a function that takes one argument or elipsis
and return a list or vector or double containing the result.}

\item{params}{contains a data.frame containing the name of parameter as column and its values.
one of ways to generate this data.frame is using the function of this package comb.*
esample: comb.randomExpandGrid()}

\item{thread.num}{the number of threads to run each execution in parallel}

\item{thread.type}{the type of thread default is 'PSOCK' for windows or 'SOCK' if not windows.
#' @return a list containing each run, this list is of the class 'rFuncOpt.result'
and can be passed to the function 'rFuncOpt_asDataFrame' to convert it to a data.frame.}
}
\description{
does a optimization of function parameters through searching.
}
\section{Unwanted params}{

if you dont want the optimization run for especific rows or params, remove them before running this function
for example:
lets think you have these parameters: 'name, age, canDrive'. the parameter 'name' contains the name of the user
the parameter 'age' contains the age, and 'canDrive' is a boolean saying if the person is habilited to drive a car.
the minimum age i will consider to drive is the 16.
so yours params are: data.frame( name=list('jessica','carla',jennifer'),age=list(19,14,16),canDrive=list(TRUE,FALSE) ).
there no reason to test the parameters when the carDrive==TRUE and age<16, in this case we can remove these combinations..
is possible to do this doing:

params<- params(-which(params[\link{'age'}]<16 & params[\link{'canDrive'}]==TRUE),)
}

\examples{
# bellow is a sample of params
params<- list(first=1:5,second=5:10,third=list(tfirst=list('level2','level3','level4'),tsecond=list('level3','level4','level5')))
params<- comb.randomExpandGrid(params)
# bellow is a sample of a function, this function is returning three metrics for example.
defaultFunction<- function(...){ list(mae=2*rnorm(1),auc=3*rnorm(1),mape=5*rnorm(1)) }

# run this function
result<- rFuncOpt(defaultFunction=defaultFunction,params=params)
print.simple.list(result)

}
